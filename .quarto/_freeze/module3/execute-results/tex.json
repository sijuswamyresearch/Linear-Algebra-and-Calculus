{
  "hash": "847f2b7424b9192142c1cfe9edebc84e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Module 3: Multivariable Calculus - Differentiation'\n---\n\n>**Syllabus:** Multivariable Calculus - Differentiation\nConcept of limit and continuity of functions of two variables - Partial derivatives of\nfirst and higher order - Implicit partial differentiation - Local linear approximations -\nChain rule for derivatives and partial derivatives - Relative maxima and minima of\nfunction of two variables (finding relative extrema only)\n\n----\n## A New Dimension\n\nSo far, our world has been one of lines, planes, and vectors—the \"flat\" world of linear algebra. Now, we venture into the \"curvy\" world of calculus, but in higher dimensions.\n\nIn single-variable calculus, you studied functions $y = f(x)$, whose graphs are curves in a 2D plane. Now, we'll explore functions of two variables, $z = f(x, y)$. Their graphs are **surfaces** in 3D space.\n\nThink of it like this: $x$ and $y$ are your coordinates on a map (east-west and north-south), and $z$ is your altitude. The function $f(x, y)$ describes a landscape. Our goal is to understand this landscape: how steep is it? Which way is uphill? Where are the peaks and valleys?\n\nLet's start by looking at a landscape.\n\n::: {#fig-surface-plot .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Define the function that describes our \"landscape\"\ndef f(x, y):\n    return (x**2 + 3*y**2) * np.exp(1 - x**2 - y**2)\n\n# Create a grid of (x,y) points\nx_vals = np.linspace(-2.5, 2.5, 100)\ny_vals = np.linspace(-2.5, 2.5, 100)\nX, Y = np.meshgrid(x_vals, y_vals)\n\n# Calculate the z-value (altitude) for each point\nZ = f(X, Y)\n\n# Create the interactive 3D surface plot\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\n\nfig.update_layout(\n    title='The \"Landscape\" of a Function of Two Variables',\n    scene=dict(\n        xaxis_title='x-axis',\n        yaxis_title='y-axis',\n        zaxis_title='z-axis (Altitude)'\n    ),\n    width=800, height=600,\n    autosize=False\n)\n\nfig.show()\n```\n\n::: {#fig-surface-plot-1 .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nAn interactive plot of the surface z = f(x,y). Our goal is to analyze its features.\n:::\n\n::: {#fig-surface-plot-2 .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\nLooking at this plot, we can see peaks, a valley at the center, and ridges. How can we find these features mathematically?\n\n## Partial Derivatives: The Slope in One Direction\n\nHow do we measure the \"slope\" of a surface? The problem is that the slope depends on which direction you're facing!\n\nThe simplest way to start is to do the simplest thing: **hold one variable constant**.\n\n1.  Imagine you are standing on the surface and decide to walk *only* in the x-direction (due east). The slope you experience is the **partial derivative with respect to x**, written as $\\frac{\\partial f}{\\partial x}$ or $f_x$.\n2.  Alternatively, if you walk *only* in the y-direction (due north), the slope is the **partial derivative with respect to y**, written as $\\frac{\\partial f}{\\partial y}$ or $f_y$.\n\nTo calculate $\\frac{\\partial f}{\\partial x}$, you simply treat $y$ as a constant and differentiate with respect to $x$. Let's use `SymPy` to do this for our function $f(x, y) = x^2 e^{-y}$.\n\n::: {#partial-derivatives-sympy .cell execution_count=2}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define x and y as symbolic variables\nx, y = sp.symbols('x y')\n\n# Define a simpler function symbolically\nf_sym = x**2 * sp.exp(-y)\n\nprint(f\"Our function is f(x, y) = {f_sym}\")\n\n# Calculate the partial derivative with respect to x (treat y as a constant)\nfx = sp.diff(f_sym, x)\nprint(f\"The partial derivative ∂f/∂x is: {fx}\")\n\n# Calculate the partial derivative with respect to y (treat x as a constant)\nfy = sp.diff(f_sym, y)\nprint(f\"The partial derivative ∂f/∂y is: {fy}\")\n\n# We can also find second-order derivatives\nfxx = sp.diff(fx, x)\nfxy = sp.diff(fx, y)\nprint(f\"\\nThe second-order partial f_xx is: {fxx}\")\nprint(f\"The mixed partial f_xy is: {fxy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOur function is f(x, y) = x**2*exp(-y)\nThe partial derivative ∂f/∂x is: 2*x*exp(-y)\nThe partial derivative ∂f/∂y is: -x**2*exp(-y)\n\nThe second-order partial f_xx is: 2*exp(-y)\nThe mixed partial f_xy is: -2*x*exp(-y)\n```\n:::\n:::\n\n\n## Tutorial- Basic Applications of Partial Differentiation in Engineering\n\n### Problem 1: Voltage variation in a resistive circuit\nIn a resistive heating circuit, the voltage developed across a resistor depends on both the current through it and its resistance, according to:\n\n$$\nV = I^2 R\n$$\n\nwhere $I$ is the current and $R$ is the resistance. The current in the circuit is $2~\\mathrm{A}$ and the resistance is $5~\\Omega$.  \n\n**Tasks:**\n\n1. Determine the sensitivity of voltage with respect to current and resistance by finding $\\dfrac{\\partial V}{\\partial I}$ and $\\dfrac{\\partial V}{\\partial R}$.\n2. Estimate the approximate change in voltage when the current increases by $0.1~\\mathrm{A}$ and the resistance decreases by $0.2~\\Omega$ due to heating.\n\n**Solution:**\n\n$$\n\\frac{\\partial V}{\\partial I} = 2 I R, \\quad \\frac{\\partial V}{\\partial R} = I^2\n$$\n\nAt $(I, R) = (2,5)$:\n\n$$\n\\frac{\\partial V}{\\partial I} = 20, \\quad \\frac{\\partial V}{\\partial R} = 4\n$$\n\nApproximate change in voltage:\n\n$$\n\\Delta V \\approx 20(0.1) + 4(-0.2) = 1.2~\\mathrm{V}\n$$\n\n**Interpretation:** A small current increase dominates, producing $\\Delta V \\approx 1.2~\\mathrm{V}$ rise.\n\n### Problem 2: Temperature distribution on a microchip surface\nIn an electronic processor, heat dissipation on the chip surface is modeled by\n\n$$\nT(x, y) = 200 e^{-0.01(x^2 + y^2)}\n$$\n\nwhere $T$ (in °C) denotes the temperature at coordinates $(x, y)$ measured in millimeters from the chip’s center.  \n\n**Tasks:**\n\n1. Find the rate of change of temperature at point $(4,3)$ along the $x$-direction.  \n2. Determine the maximum rate of increase of temperature and the direction in which it occurs.\n\n**Solution:**\n\n$$\nT_x = -4x\\, e^{-0.01(x^2 + y^2)}, \\quad T_y = -4y\\, e^{-0.01(x^2 + y^2)}\n$$\n\nAt $(4,3)$:\n\n$$\nT_x = -16 e^{-0.25}, \\quad T_y = -12 e^{-0.25}\n$$\n\nThe gradient:\n\n$$\n\\nabla T = (-16 e^{-0.25}, -12 e^{-0.25})\n$$\n\nMagnitude of maximum rate of increase:\n\n$$\n\\|\\nabla T\\| = 20 e^{-0.25}\n$$\n\nDirection toward maximum increase: $(-\\frac{4}{5}, -\\frac{3}{5})$ (toward the chip center).\n\n\n\n### Problem 3: Electrostatic potential and field intensity\nThe electrostatic potential $V$ at a point $(x, y, z)$ near a charge $q$ is expressed as\n\n$$\nV(x, y, z) = \\frac{kq}{\\sqrt{x^2 + y^2 + z^2}}\n$$\n\nwhere $k$ is a constant of proportionality.  \n\n**Tasks:**\n\n1. Compute $\\dfrac{\\partial V}{\\partial x}$, $\\dfrac{\\partial V}{\\partial y}$, and $\\dfrac{\\partial V}{\\partial z}$.\n2. Derive the expression for the electric field vector $\\vec{E} = -\\nabla V$ and discuss its physical direction.\n\n**Solution:**\n\n$$\n\\frac{\\partial V}{\\partial x} = -\\frac{kq\\, x}{(x^2 + y^2 + z^2)^{3/2}}, \\quad\n\\frac{\\partial V}{\\partial y} = -\\frac{kq\\, y}{(x^2 + y^2 + z^2)^{3/2}}, \\quad\n\\frac{\\partial V}{\\partial z} = -\\frac{kq\\, z}{(x^2 + y^2 + z^2)^{3/2}}\n$$\n\nElectric field vector:\n\n$$\n\\vec{E} = \\frac{kq (x, y, z)}{(x^2 + y^2 + z^2)^{3/2}}\n$$\n\nDirection: radially outward for a positive charge.\n\n\n### Problem 4: Gradient descent in a learning model\nIn a neural network, the cost function for a single data instance $(x_1, x_2, y)$ is defined by\n\n$$\nJ(w_1, w_2) = (w_1 x_1 + w_2 x_2 - y)^2\n$$\n\nwhere $w_1$ and $w_2$ are the model parameters.  \n\n**Tasks:**\n\n1. Find $\\dfrac{\\partial J}{\\partial w_1}$ and $\\dfrac{\\partial J}{\\partial w_2}$.\n2. Explain the significance of these derivatives in adjusting the weights using gradient descent.\n\n**Solution:**\n\n$$\n\\frac{\\partial J}{\\partial w_1} = 2 (w_1 x_1 + w_2 x_2 - y) x_1, \\quad\n\\frac{\\partial J}{\\partial w_2} = 2 (w_1 x_1 + w_2 x_2 - y) x_2\n$$\n\nThe gradient $\\nabla J$ guides weight updates via:\n\n$$\nw_i \\leftarrow w_i - \\eta \\frac{\\partial J}{\\partial w_i}\n$$\n\n\n\n### Problem 6: CPU performance sensitivity analysis\nA simplified performance model for a CPU relates processing time $t$ (ms) to clock frequency $f$ (GHz) and memory load $m$ (GB) as\n\n$$\nt(f, m) = \\frac{1000 m}{f - 0.1 m}\n$$\n\n**Tasks:**\n\n1. Find $\\dfrac{\\partial t}{\\partial f}$ and $\\dfrac{\\partial t}{\\partial m}$.\n2. Interpret these derivatives as sensitivity measures of CPU performance with respect to $f$ and $m$.\n\n**Solution:**\n\n$$\n\\frac{\\partial t}{\\partial f} = -\\frac{1000 m}{(f - 0.1 m)^2}, \\quad\n\\frac{\\partial t}{\\partial m} = \\frac{1000 f}{(f - 0.1 m)^2}\n$$\n\nIncreasing $f$ reduces processing time; increasing $m$ increases processing time. Sensitivities scale with $(f - 0.1 m)^{-2}$.\n\n\n### Problem 7\nIf $f(x, y, z) = \\ln(\\tan x + \\tan y + \\tan z)$, show that\n\n$$\n\\sin 2x\\, f_x + \\sin 2y\\, f_y + \\sin 2z\\, f_z = 2\n$$\n\n**Solution:**\n\n$$\nf_x = \\frac{\\sec^2 x}{\\tan x + \\tan y + \\tan z}, \\quad \\sin 2x\\, f_x = \\frac{2 \\tan x}{\\tan x + \\tan y + \\tan z}\n$$\n\nSimilarly for $y, z$. Adding all terms:\n\n$$\n\\sin 2x\\, f_x + \\sin 2y\\, f_y + \\sin 2z\\, f_z = 2\n$$\n\n\n\n### Problem 8\nIf $g(x, y, z) = \\ln(\\cot x + \\cot y + \\cot z)$, prove that\n\n$$\n\\sin 2x\\, g_x + \\sin 2y\\, g_y + \\sin 2z\\, g_z = -2\n$$\n\n**Solution:**\n\n$$\ng_x = \\frac{-\\csc^2 x}{\\cot x + \\cot y + \\cot z}, \\quad \\sin 2x\\, g_x = -\\frac{2 \\cot x}{\\cot x + \\cot y + \\cot z}\n$$\n\nSumming over $x, y, z$ gives $-2$.\n\n\n\n### Problem 9\nIf $h(x, y, z) = \\ln(\\tan x \\tan y \\tan z)$, show that\n\n$$\n\\sin 2x\\, h_x + \\sin 2y\\, h_y + \\sin 2z\\, h_z = 6\n$$\n\n**Solution:**\n\n$$\nh_x = \\frac{\\sec^2 x}{\\tan x} = \\frac{2}{\\sin 2x} \\Rightarrow \\sin 2x\\, h_x = 2\n$$\n\nSimilarly for $y, z$, summing gives $6$.\n\n\n\n## The Gradient and Linear Approximation\n\nThe two partial derivatives tell us the slope in the cardinal directions. But what if we want to know the slope in *any* direction? We can package our partial derivatives into a single, powerful object: the **gradient vector**.\n\n> **Definition: The Gradient**\n> The gradient of $f(x,y)$ is the vector:\n> $$ \\nabla f = \\begin{bmatrix} \\frac{\\partial f}{\\partial x} \\\\ \\frac{\\partial f}{\\partial y} \\end{bmatrix} = f_x \\mathbf{i} + f_y \\mathbf{j} $$\n\nThe gradient is not just a container. It has a beautiful geometric meaning:\n\n1.  **Direction:** The gradient vector $\\nabla f$ at a point $(x_0, y_0)$ points in the direction of the **steepest ascent** on the surface. It's the \"uphill\" direction.\n2.  **Magnitude:** The magnitude of the gradient, $||\\nabla f||$, is the slope in that steepest direction.\n\nThis leads to the idea of **local linear approximation**. Just as a smooth curve looks like its tangent line up close, a smooth surface looks like its **tangent plane** up close. The gradient helps us define this plane.\n\n## Local Linear Approximation: The Tangent Plane\n\nThis is a central idea that connects everything together. Remember from single-variable calculus the **Madhava-Taylor series**. The first-order approximation of a function $f(x)$ near a point $x=a$ is its tangent line:\n$$ L(x) = f(a) + f'(a)(x-a) $$\nThis is the **local linear approximation**. The idea is powerful: if you zoom in far enough on any smooth curve, it looks like a straight line.\n\nWe will now extend this to two dimensions. If you zoom in far enough on any smooth surface, it looks like a flat **plane**. This is the **tangent plane**.\n\n> **Definition: Local Linear Approximation**\n> The local linear approximation of a function $f(x,y)$ at a point $(a,b)$ is given by:\n> $$ L(x, y) = f(a, b) + f_x(a, b)(x-a) + f_y(a, b)(y-b) $$\n> The graph of this function, $z = L(x,y)$, is the **tangent plane** to the surface $z = f(x,y)$ at the point $(a,b)$.\n\nThis formula is a beautiful extension of the 1D case. It says the approximate height near $(a,b)$ is the starting height $f(a,b)$, plus the change due to moving in x (slope in x times distance in x), plus the change due to moving in y (slope in y times distance in y).\n\n### Problem and Application: Estimating Values\n\nLet's find the tangent plane for the function $f(x,y) = \\sqrt{x^2 + y^2}$ (a cone) at the point $(3, 4)$ and use it to approximate $f(3.01, 3.99)$.\n\n::: {#linear-approx-problem .cell execution_count=3}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols and the function\nx, y = sp.symbols('x y')\nf = sp.sqrt(x**2 + y**2)\na, b = 3, 4\n\n# 1. Find the value of the function at (a,b)\nf_val = f.subs([(x, a), (y, b)])\nprint(f\"The value f({a},{b}) is: {f_val}\")\n\n# 2. Find the partial derivatives\nfx = sp.diff(f, x)\nfy = sp.diff(f, y)\nprint(f\"∂f/∂x = {fx}\")\nprint(f\"∂f/∂y = {fy}\")\n\n# 3. Find the slope values at (a,b)\nfx_val = fx.subs([(x, a), (y, b)])\nfy_val = fy.subs([(x, a), (y, b)])\nprint(f\"\\nThe slope fx({a},{b}) is: {fx_val}\")\nprint(f\"The slope fy({a},{b}) is: {fy_val}\")\n\n# 4. Assemble the linear approximation L(x,y)\nL = f_val + fx_val * (x - a) + fy_val * (y - b)\nprint(f\"\\nThe Tangent Plane equation is: z = {sp.simplify(L)}\")\n\n# 5. Use L to approximate f(3.01, 3.99)\napprox_val = L.subs([(x, 3.01), (y, 3.99)])\nprint(f\"\\nThe approximate value of f(3.01, 3.99) is: {approx_val}\")\n\n# 6. Compare with the true value\ntrue_val = f.subs([(x, 3.01), (y, 3.99)])\nprint(f\"The true value is: {true_val.evalf()}\")\nprint(f\"The approximation is excellent!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value f(3,4) is: 5\n∂f/∂x = x/sqrt(x**2 + y**2)\n∂f/∂y = y/sqrt(x**2 + y**2)\n\nThe slope fx(3,4) is: 3/5\nThe slope fy(3,4) is: 4/5\n\nThe Tangent Plane equation is: z = 3*x/5 + 4*y/5\n\nThe approximate value of f(3.01, 3.99) is: 4.99800000000000\nThe true value is: 4.99801960780468\nThe approximation is excellent!\n```\n:::\n:::\n\n\n### Visualization: Surface and Tangent Plane\n\nSeeing is believing. Let's plot the cone and its tangent plane at $(3, 4, 5)$. Notice how the plane perfectly \"kisses\" the surface at that single point.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Define the surface function\ndef f_np(x, y):\n    return np.sqrt(x**2 + y**2)\n\n# Create grid for the surface plot\nx_surf = np.linspace(0, 6, 50)\ny_surf = np.linspace(0, 8, 50)\nX_surf, Y_surf = np.meshgrid(x_surf, y_surf)\nZ_surf = f_np(X_surf, Y_surf)\n\n# Tangent plane: L(x,y) = 5 + (3/5)(x-3) + (4/5)(y-4)\ndef L_np(x, y):\n    return 5 + (3/5)*(x - 3) + (4/5)*(y - 4)\n\nX_plane, Y_plane = np.meshgrid(np.linspace(1, 5, 10), np.linspace(2, 6, 10))\nZ_plane = L_np(X_plane, Y_plane)\n\n# Create the plot\nfig = go.Figure()\n\n# Add the surface\nfig.add_trace(go.Surface(z=Z_surf, x=X_surf, y=Y_surf, opacity=0.8, name='f(x,y)'))\n\n# Add the tangent plane\nfig.add_trace(go.Surface(z=Z_plane, x=X_plane, y=Y_plane,\n                         colorscale='Reds', showscale=False, name='Tangent Plane'))\n\n# Add the point of tangency (3,4,5)\nfig.add_trace(go.Scatter3d(\n    x=[3], y=[4], z=[5],\n    mode='markers',\n    marker=dict(size=8, color='black'),\n    name='Point (3,4,5)'\n))\n\nfig.update_layout(title='Surface and its Tangent Plane',\n                  width=800, height=600, autosize=False)\nfig.show()\n```\n\n::: {#fig-tangent-plane .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nThe tangent plane (red) provides a linear approximation to the surface (blue) at the point of tangency.\n:::\n:::\n\n\n## The Chain Rule: Derivatives on a Path\n\nWhat if you're not standing still, but walking along a path on the map? Suppose your path is given by $(x(t), y(t))$. Your altitude is then $z = f(x(t), y(t))$. How fast is your altitude changing with respect to time, $t$?\n\nThe **multivariable chain rule** gives the answer:\n$$ \\frac{dz}{dt} = \\frac{\\partial f}{\\partial x} \\frac{dx}{dt} + \\frac{\\partial f}{\\partial y} \\frac{dy}{dt} $$\n\nThis formula has a beautiful, compact form using the gradient and the velocity vector of your path, $r'(t) = \\begin{bmatrix} dx/dt \\\\ dy/dt \\end{bmatrix}$:\n$$ \\frac{dz}{dt} = \\nabla f \\cdot r'(t) $$\nThe rate of change of your altitude is the dot product of the \"steepest uphill\" vector and your direction of travel vector. This is a perfect example of how linear algebra and calculus work together.\n\n## The Main Event: Finding Maxima and Minima\n\nNow we can answer the big question: how do we find the peaks and valleys of our landscape?\n\nAt the very top of a peak or the bottom of a valley, the ground is perfectly flat. The slope in *every* direction is zero. This means both partial derivatives must be zero.\n\n> **Critical Points**\n> A point $(a, b)$ is a **critical point** of $f(x,y)$ if the gradient at that point is the zero vector:\n> $$ \\nabla f(a, b) = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} \\quad \\text{which means} \\quad f_x(a, b) = 0 \\text{ and } f_y(a, b) = 0 $$\n\nBut a flat spot isn't always a peak or a valley. It could also be a **saddle point**, like the middle of a Pringles chip—it's a minimum in one direction and a maximum in another.\n\nTo classify these critical points, we need a multivariable version of the Second Derivative Test. This test involves a quantity called the **Discriminant** ($D$), which is built from the second-order partial derivatives.\n\n::: {.callout-note}\n### The Second Derivative Test\n\nFirst, find all critical points by solving $\\nabla f = 0$. Then, for each critical point $(a, b)$, calculate the second partial derivatives ($f_{xx}, f_{yy}, f_{xy}$) at that point.\n\nDefine the Discriminant $D = f_{xx}(a,b) f_{yy}(a,b) - [f_{xy}(a,b)]^2$.\n\n1.  If $D > 0$ and $f_{xx}(a,b) > 0$, then $f$ has a **local minimum** at $(a, b)$.\n2.  If $D > 0$ and $f_{xx}(a,b) < 0$, then $f$ has a **local maximum** at $(a, b)$.\n3.  If $D < 0$, then $f$ has a **saddle point** at $(a, b)$.\n4.  If $D = 0$, the test is inconclusive.\n:::\n\nNote that the Discriminant is just the determinant of the **Hessian matrix**, a beautiful connection back to linear algebra!\n$$ H = \\begin{bmatrix} f_{xx} & f_{xy} \\\\ f_{yx} & f_{yy} \\end{bmatrix} \\implies D = \\det(H) $$\n\n### Example: Finding the Extrema of Our Landscape\n\nLet's use `SymPy` to find and classify all the critical points of the function $f(x, y) = (x^2 + 3y^2) e^{1 - x^2 - y^2}$ we plotted at the beginning.\n\n::: {#find-classify-extrema .cell execution_count=5}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols and the function\nx, y = sp.symbols('x y')\nf = (x**2 + 3*y**2) * sp.exp(1 - x**2 - y**2)\n\n# 1. Find the partial derivatives\nfx = sp.diff(f, x)\nfy = sp.diff(f, y)\n\n# 2. Find the critical points by solving ∇f = 0\n# This can be computationally intensive; we'll use a numerical approach for clarity\n# For this specific function, inspection shows critical points at:\n# (0,0), (1,0), (-1,0), (0,1), (0,-1)\ncritical_points = [\n    (0, 0),\n    (1, 0),\n    (-1, 0),\n    (0, 1),\n    (0, -1)\n]\nprint(f\"The critical points are: {critical_points}\\n\")\n\n\n# 3. Calculate second-order partial derivatives\nfxx = sp.diff(fx, x)\nfyy = sp.diff(fy, y)\nfxy = sp.diff(fx, y)\n\n# 4. Create the Discriminant D\nD = fxx * fyy - fxy**2\n\n# 5. Classify each critical point\nfor p in critical_points:\n    px, py = p\n    # Substitute the point's coordinates into D and fxx\n    D_val = D.subs([(x, px), (y, py)])\n    fxx_val = fxx.subs([(x, px), (y, py)])\n    \n    print(f\"--- Analyzing point {p} ---\")\n    print(f\"  D = {D_val:.2f}, f_xx = {fxx_val:.2f}\")\n\n    if D_val > 0 and fxx_val > 0:\n        print(\"  Result: Local Minimum\")\n    elif D_val > 0 and fxx_val < 0:\n        print(\"  Result: Local Maximum\")\n    elif D_val < 0:\n        print(\"  Result: Saddle Point\")\n    else:\n        print(\"  Result: Test is inconclusive\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe critical points are: [(0, 0), (1, 0), (-1, 0), (0, 1), (0, -1)]\n\n--- Analyzing point (0, 0) ---\n  D = 88.67, f_xx = 5.44\n  Result: Local Minimum\n--- Analyzing point (1, 0) ---\n  D = -16.00, f_xx = -4.00\n  Result: Saddle Point\n--- Analyzing point (-1, 0) ---\n  D = -16.00, f_xx = -4.00\n  Result: Saddle Point\n--- Analyzing point (0, 1) ---\n  D = 48.00, f_xx = -4.00\n  Result: Local Maximum\n--- Analyzing point (0, -1) ---\n  D = 48.00, f_xx = -4.00\n  Result: Local Maximum\n```\n:::\n:::\n\n\nThe results match what we see in the 3D plot perfectly! The origin is a local minimum, the points on the y-axis are local maxima (the two highest peaks), and the points on the x-axis are saddle points.\n\n## Module III Summary\n\n*   We've moved from 2D curves to 3D surfaces, or \"landscapes.\"\n*   **Partial derivatives** ($f_x, f_y$) are the slopes in the cardinal directions.\n*   The **gradient vector** ($\\nabla f = [f_x, f_y]$) packages these slopes and points in the direction of steepest ascent. It is the key to understanding the local geometry of a surface.\n*   To find potential maxima and minima (**critical points**), we find where the landscape is flat by solving $\\nabla f = 0$.\n*   The **Second Derivative Test**, using the determinant of the Hessian matrix, allows us to classify these critical points as local maxima, local minima, or saddle points.\n*   This process of finding extrema is called **optimization**, and it is the absolute core of how modern AI models are trained.\n\n",
    "supporting": [
      "module3_files\\figure-pdf"
    ],
    "filters": []
  }
}