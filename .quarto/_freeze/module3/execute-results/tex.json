{
  "hash": "c1e5d6a8a9fd8656579ad6a2a5c4aa9a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Module 3: Multivariable Calculus - Differentiation'\n---\n\n>**Syllabus:** Multivariable Calculus - Differentiation\nConcept of limit and continuity of functions of two variables - Partial derivatives of\nfirst and higher order - Implicit partial differentiation - Local linear approximations -\nChain rule for derivatives and partial derivatives - Relative maxima and minima of\nfunction of two variables (finding relative extrema only)\n\n----\n## A New Dimension\n\nSo far, our world has been one of lines, planes, and vectors—the \"flat\" world of linear algebra. Now, we venture into the \"curvy\" world of calculus, but in higher dimensions.\n\nIn single-variable calculus, you studied functions $y = f(x)$, whose graphs are curves in a 2D plane. Now, we'll explore functions of two variables, $z = f(x, y)$. Their graphs are **surfaces** in 3D space.\n\nThink of it like this: $x$ and $y$ are your coordinates on a map (east-west and north-south), and $z$ is your altitude. The function $f(x, y)$ describes a landscape. Our goal is to understand this landscape: how steep is it? Which way is uphill? Where are the peaks and valleys?\n\nLet's start by looking at a landscape.\n\n::: {#fig-surface-plot .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Define the function that describes our \"landscape\"\ndef f(x, y):\n    return (x**2 + 3*y**2) * np.exp(1 - x**2 - y**2)\n\n# Create a grid of (x,y) points\nx_vals = np.linspace(-2.5, 2.5, 100)\ny_vals = np.linspace(-2.5, 2.5, 100)\nX, Y = np.meshgrid(x_vals, y_vals)\n\n# Calculate the z-value (altitude) for each point\nZ = f(X, Y)\n\n# Create the interactive 3D surface plot\nfig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])\n\nfig.update_layout(\n    title='The \"Landscape\" of a Function of Two Variables',\n    scene=dict(\n        xaxis_title='x-axis',\n        yaxis_title='y-axis',\n        zaxis_title='z-axis (Altitude)'\n    ),\n    width=800, height=600,\n    autosize=False\n)\n\nfig.show()\n```\n\n::: {#fig-surface-plot-1 .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nAn interactive plot of the surface z = f(x,y). Our goal is to analyze its features.\n:::\n\n::: {#fig-surface-plot-2 .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\nLooking at this plot, we can see peaks, a valley at the center, and ridges. How can we find these features mathematically?\n\n## Partial Derivatives: The Slope in One Direction\n\nHow do we measure the \"slope\" of a surface? The problem is that the slope depends on which direction you're facing!\n\nThe simplest way to start is to do the simplest thing: **hold one variable constant**.\n\n1.  Imagine you are standing on the surface and decide to walk *only* in the x-direction (due east). The slope you experience is the **partial derivative with respect to x**, written as $\\frac{\\partial f}{\\partial x}$ or $f_x$.\n2.  Alternatively, if you walk *only* in the y-direction (due north), the slope is the **partial derivative with respect to y**, written as $\\frac{\\partial f}{\\partial y}$ or $f_y$.\n\nTo calculate $\\frac{\\partial f}{\\partial x}$, you simply treat $y$ as a constant and differentiate with respect to $x$. Let's use `SymPy` to do this for our function $f(x, y) = x^2 e^{-y}$.\n\n::: {#partial-derivatives-sympy .cell execution_count=2}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define x and y as symbolic variables\nx, y = sp.symbols('x y')\n\n# Define a simpler function symbolically\nf_sym = x**2 * sp.exp(-y)\n\nprint(f\"Our function is f(x, y) = {f_sym}\")\n\n# Calculate the partial derivative with respect to x (treat y as a constant)\nfx = sp.diff(f_sym, x)\nprint(f\"The partial derivative ∂f/∂x is: {fx}\")\n\n# Calculate the partial derivative with respect to y (treat x as a constant)\nfy = sp.diff(f_sym, y)\nprint(f\"The partial derivative ∂f/∂y is: {fy}\")\n\n# We can also find second-order derivatives\nfxx = sp.diff(fx, x)\nfxy = sp.diff(fx, y)\nprint(f\"\\nThe second-order partial f_xx is: {fxx}\")\nprint(f\"The mixed partial f_xy is: {fxy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOur function is f(x, y) = x**2*exp(-y)\nThe partial derivative ∂f/∂x is: 2*x*exp(-y)\nThe partial derivative ∂f/∂y is: -x**2*exp(-y)\n\nThe second-order partial f_xx is: 2*exp(-y)\nThe mixed partial f_xy is: -2*x*exp(-y)\n```\n:::\n:::\n\n\n## Tutorial- Basic Applications of Partial Differentiation in Engineering\n\n### Problem 1: Voltage variation in a resistive circuit\nIn a resistive heating circuit, the voltage developed across a resistor depends on both the current through it and its resistance, according to:\n\n$$\nV = I^2 R\n$$\n\nwhere $I$ is the current and $R$ is the resistance. The current in the circuit is $2~\\mathrm{A}$ and the resistance is $5~\\Omega$.  \n\n**Tasks:**\n\n1. Determine the sensitivity of voltage with respect to current and resistance by finding $\\dfrac{\\partial V}{\\partial I}$ and $\\dfrac{\\partial V}{\\partial R}$.\n2. Estimate the approximate change in voltage when the current increases by $0.1~\\mathrm{A}$ and the resistance decreases by $0.2~\\Omega$ due to heating.\n\n**Solution:**\n\n$$\n\\frac{\\partial V}{\\partial I} = 2 I R, \\quad \\frac{\\partial V}{\\partial R} = I^2\n$$\n\nAt $(I, R) = (2,5)$:\n\n$$\n\\frac{\\partial V}{\\partial I} = 20, \\quad \\frac{\\partial V}{\\partial R} = 4\n$$\n\nApproximate change in voltage:\n\n$$\n\\Delta V \\approx 20(0.1) + 4(-0.2) = 1.2~\\mathrm{V}\n$$\n\n**Interpretation:** A small current increase dominates, producing $\\Delta V \\approx 1.2~\\mathrm{V}$ rise.\n\n### Problem 2: Temperature distribution on a microchip surface\nIn an electronic processor, heat dissipation on the chip surface is modeled by\n\n$$\nT(x, y) = 200 e^{-0.01(x^2 + y^2)}\n$$\n\nwhere $T$ (in °C) denotes the temperature at coordinates $(x, y)$ measured in millimeters from the chip’s center.  \n\n**Tasks:**\n\n1. Find the rate of change of temperature at point $(4,3)$ along the $x$-direction.  \n2. Determine the maximum rate of increase of temperature and the direction in which it occurs.\n\n**Solution:**\n\n$$\nT_x = -4x\\, e^{-0.01(x^2 + y^2)}, \\quad T_y = -4y\\, e^{-0.01(x^2 + y^2)}\n$$\n\nAt $(4,3)$:\n\n$$\nT_x = -16 e^{-0.25}, \\quad T_y = -12 e^{-0.25}\n$$\n\nThe gradient:\n\n$$\n\\nabla T = (-16 e^{-0.25}, -12 e^{-0.25})\n$$\n\nMagnitude of maximum rate of increase:\n\n$$\n\\|\\nabla T\\| = 20 e^{-0.25}\n$$\n\nDirection toward maximum increase: $(-\\frac{4}{5}, -\\frac{3}{5})$ (toward the chip center).\n\n\n\n### Problem 3: Electrostatic potential and field intensity\nThe electrostatic potential $V$ at a point $(x, y, z)$ near a charge $q$ is expressed as\n\n$$\nV(x, y, z) = \\frac{kq}{\\sqrt{x^2 + y^2 + z^2}}\n$$\n\nwhere $k$ is a constant of proportionality.  \n\n**Tasks:**\n\n1. Compute $\\dfrac{\\partial V}{\\partial x}$, $\\dfrac{\\partial V}{\\partial y}$, and $\\dfrac{\\partial V}{\\partial z}$.\n2. Derive the expression for the electric field vector $\\vec{E} = -\\nabla V$ and discuss its physical direction.\n\n**Solution:**\n\n$$\n\\frac{\\partial V}{\\partial x} = -\\frac{kq\\, x}{(x^2 + y^2 + z^2)^{3/2}}, \\quad\n\\frac{\\partial V}{\\partial y} = -\\frac{kq\\, y}{(x^2 + y^2 + z^2)^{3/2}}, \\quad\n\\frac{\\partial V}{\\partial z} = -\\frac{kq\\, z}{(x^2 + y^2 + z^2)^{3/2}}\n$$\n\nElectric field vector:\n\n$$\n\\vec{E} = \\frac{kq (x, y, z)}{(x^2 + y^2 + z^2)^{3/2}}\n$$\n\nDirection: radially outward for a positive charge.\n\n\n### Problem 4: Gradient descent in a learning model\nIn a neural network, the cost function for a single data instance $(x_1, x_2, y)$ is defined by\n\n$$\nJ(w_1, w_2) = (w_1 x_1 + w_2 x_2 - y)^2\n$$\n\nwhere $w_1$ and $w_2$ are the model parameters.  \n\n**Tasks:**\n\n1. Find $\\dfrac{\\partial J}{\\partial w_1}$ and $\\dfrac{\\partial J}{\\partial w_2}$.\n2. Explain the significance of these derivatives in adjusting the weights using gradient descent.\n\n**Solution:**\n\n$$\n\\frac{\\partial J}{\\partial w_1} = 2 (w_1 x_1 + w_2 x_2 - y) x_1, \\quad\n\\frac{\\partial J}{\\partial w_2} = 2 (w_1 x_1 + w_2 x_2 - y) x_2\n$$\n\nThe gradient $\\nabla J$ guides weight updates via:\n\n$$\nw_i \\leftarrow w_i - \\eta \\frac{\\partial J}{\\partial w_i}\n$$\n\n\n\n### Problem 6: CPU performance sensitivity analysis\nA simplified performance model for a CPU relates processing time $t$ (ms) to clock frequency $f$ (GHz) and memory load $m$ (GB) as\n\n$$\nt(f, m) = \\frac{1000 m}{f - 0.1 m}\n$$\n\n**Tasks:**\n\n1. Find $\\dfrac{\\partial t}{\\partial f}$ and $\\dfrac{\\partial t}{\\partial m}$.\n2. Interpret these derivatives as sensitivity measures of CPU performance with respect to $f$ and $m$.\n\n**Solution:**\n\n$$\n\\frac{\\partial t}{\\partial f} = -\\frac{1000 m}{(f - 0.1 m)^2}, \\quad\n\\frac{\\partial t}{\\partial m} = \\frac{1000 f}{(f - 0.1 m)^2}\n$$\n\nIncreasing $f$ reduces processing time; increasing $m$ increases processing time. Sensitivities scale with $(f - 0.1 m)^{-2}$.\n\n\n### Problem 7\nIf $f(x, y, z) = \\ln(\\tan x + \\tan y + \\tan z)$, show that\n\n$$\n\\sin 2x\\, f_x + \\sin 2y\\, f_y + \\sin 2z\\, f_z = 2\n$$\n\n**Solution:**\n\n$$\nf_x = \\frac{\\sec^2 x}{\\tan x + \\tan y + \\tan z}, \\quad \\sin 2x\\, f_x = \\frac{2 \\tan x}{\\tan x + \\tan y + \\tan z}\n$$\n\nSimilarly for $y, z$. Adding all terms:\n\n$$\n\\sin 2x\\, f_x + \\sin 2y\\, f_y + \\sin 2z\\, f_z = 2\n$$\n\n\n\n### Problem 8\nIf $g(x, y, z) = \\ln(\\cot x + \\cot y + \\cot z)$, prove that\n\n$$\n\\sin 2x\\, g_x + \\sin 2y\\, g_y + \\sin 2z\\, g_z = -2\n$$\n\n**Solution:**\n\n$$\ng_x = \\frac{-\\csc^2 x}{\\cot x + \\cot y + \\cot z}, \\quad \\sin 2x\\, g_x = -\\frac{2 \\cot x}{\\cot x + \\cot y + \\cot z}\n$$\n\nSumming over $x, y, z$ gives $-2$.\n\n\n\n### Problem 9\nIf $h(x, y, z) = \\ln(\\tan x \\tan y \\tan z)$, show that\n\n$$\n\\sin 2x\\, h_x + \\sin 2y\\, h_y + \\sin 2z\\, h_z = 6\n$$\n\n**Solution:**\n\n$$\nh_x = \\frac{\\sec^2 x}{\\tan x} = \\frac{2}{\\sin 2x} \\Rightarrow \\sin 2x\\, h_x = 2\n$$\n\nSimilarly for $y, z$, summing gives $6$.\n\n\n\n## The Gradient and Linear Approximation\n\nThe two partial derivatives tell us the slope in the cardinal directions. But what if we want to know the slope in *any* direction? We can package our partial derivatives into a single, powerful object: the **gradient vector**.\n\n> **Definition: The Gradient**\n> The gradient of $f(x,y)$ is the vector:\n> $$ \\nabla f = \\begin{bmatrix} \\frac{\\partial f}{\\partial x} \\\\ \\frac{\\partial f}{\\partial y} \\end{bmatrix} = f_x \\mathbf{i} + f_y \\mathbf{j} $$\n\nThe gradient is not just a container. It has a beautiful geometric meaning:\n\n1.  **Direction:** The gradient vector $\\nabla f$ at a point $(x_0, y_0)$ points in the direction of the **steepest ascent** on the surface. It's the \"uphill\" direction.\n2.  **Magnitude:** The magnitude of the gradient, $||\\nabla f||$, is the slope in that steepest direction.\n\nThis leads to the idea of **local linear approximation**. Just as a smooth curve looks like its tangent line up close, a smooth surface looks like its **tangent plane** up close. The gradient helps us define this plane.\n\n## Local Linear Approximation: The Tangent Plane\n\nThis is a central idea that connects everything together. Remember from single-variable calculus the **Madhava-Taylor series**. The first-order approximation of a function $f(x)$ near a point $x=a$ is its tangent line:\n$$ L(x) = f(a) + f'(a)(x-a) $$\nThis is the **local linear approximation**. The idea is powerful: if you zoom in far enough on any smooth curve, it looks like a straight line.\n\nWe will now extend this to two dimensions. If you zoom in far enough on any smooth surface, it looks like a flat **plane**. This is the **tangent plane**.\n\n> **Definition: Local Linear Approximation**\n> The local linear approximation of a function $f(x,y)$ at a point $(a,b)$ is given by:\n> $$ L(x, y) = f(a, b) + f_x(a, b)(x-a) + f_y(a, b)(y-b) $$\n> The graph of this function, $z = L(x,y)$, is the **tangent plane** to the surface $z = f(x,y)$ at the point $(a,b)$.\n\nThis formula is a beautiful extension of the 1D case. It says the approximate height near $(a,b)$ is the starting height $f(a,b)$, plus the change due to moving in x (slope in x times distance in x), plus the change due to moving in y (slope in y times distance in y).\n\n### Problem and Application: Estimating Values\n\nLet's find the tangent plane for the function $f(x,y) = \\sqrt{x^2 + y^2}$ (a cone) at the point $(3, 4)$ and use it to approximate $f(3.01, 3.99)$.\n\n::: {#linear-approx-problem .cell execution_count=3}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols and the function\nx, y = sp.symbols('x y')\nf = sp.sqrt(x**2 + y**2)\na, b = 3, 4\n\n# 1. Find the value of the function at (a,b)\nf_val = f.subs([(x, a), (y, b)])\nprint(f\"The value f({a},{b}) is: {f_val}\")\n\n# 2. Find the partial derivatives\nfx = sp.diff(f, x)\nfy = sp.diff(f, y)\nprint(f\"∂f/∂x = {fx}\")\nprint(f\"∂f/∂y = {fy}\")\n\n# 3. Find the slope values at (a,b)\nfx_val = fx.subs([(x, a), (y, b)])\nfy_val = fy.subs([(x, a), (y, b)])\nprint(f\"\\nThe slope fx({a},{b}) is: {fx_val}\")\nprint(f\"The slope fy({a},{b}) is: {fy_val}\")\n\n# 4. Assemble the linear approximation L(x,y)\nL = f_val + fx_val * (x - a) + fy_val * (y - b)\nprint(f\"\\nThe Tangent Plane equation is: z = {sp.simplify(L)}\")\n\n# 5. Use L to approximate f(3.01, 3.99)\napprox_val = L.subs([(x, 3.01), (y, 3.99)])\nprint(f\"\\nThe approximate value of f(3.01, 3.99) is: {approx_val}\")\n\n# 6. Compare with the true value\ntrue_val = f.subs([(x, 3.01), (y, 3.99)])\nprint(f\"The true value is: {true_val.evalf()}\")\nprint(f\"The approximation is excellent!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe value f(3,4) is: 5\n∂f/∂x = x/sqrt(x**2 + y**2)\n∂f/∂y = y/sqrt(x**2 + y**2)\n\nThe slope fx(3,4) is: 3/5\nThe slope fy(3,4) is: 4/5\n\nThe Tangent Plane equation is: z = 3*x/5 + 4*y/5\n\nThe approximate value of f(3.01, 3.99) is: 4.99800000000000\nThe true value is: 4.99801960780468\nThe approximation is excellent!\n```\n:::\n:::\n\n\n### Visualization: Surface and Tangent Plane\n\nSeeing is believing. Let's plot the cone and its tangent plane at $(3, 4, 5)$. Notice how the plane perfectly \"kisses\" the surface at that single point.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Define the surface function\ndef f_np(x, y):\n    return np.sqrt(x**2 + y**2)\n\n# Create grid for the surface plot\nx_surf = np.linspace(0, 6, 50)\ny_surf = np.linspace(0, 8, 50)\nX_surf, Y_surf = np.meshgrid(x_surf, y_surf)\nZ_surf = f_np(X_surf, Y_surf)\n\n# Tangent plane: L(x,y) = 5 + (3/5)(x-3) + (4/5)(y-4)\ndef L_np(x, y):\n    return 5 + (3/5)*(x - 3) + (4/5)*(y - 4)\n\nX_plane, Y_plane = np.meshgrid(np.linspace(1, 5, 10), np.linspace(2, 6, 10))\nZ_plane = L_np(X_plane, Y_plane)\n\n# Create the plot\nfig = go.Figure()\n\n# Add the surface\nfig.add_trace(go.Surface(z=Z_surf, x=X_surf, y=Y_surf, opacity=0.8, name='f(x,y)'))\n\n# Add the tangent plane\nfig.add_trace(go.Surface(z=Z_plane, x=X_plane, y=Y_plane,\n                         colorscale='Reds', showscale=False, name='Tangent Plane'))\n\n# Add the point of tangency (3,4,5)\nfig.add_trace(go.Scatter3d(\n    x=[3], y=[4], z=[5],\n    mode='markers',\n    marker=dict(size=8, color='black'),\n    name='Point (3,4,5)'\n))\n\nfig.update_layout(title='Surface and its Tangent Plane',\n                  width=800, height=600, autosize=False)\nfig.show()\n```\n\n::: {#fig-tangent-plane .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nThe tangent plane (red) provides a linear approximation to the surface (blue) at the point of tangency.\n:::\n:::\n\n\n## The Chain Rule: Derivatives on a Path\n\nWhat if you're not standing still, but walking along a path on the map? Suppose your path is given by $(x(t), y(t))$. Your altitude is then $z = f(x(t), y(t))$. How fast is your altitude changing with respect to time, $t$?\n\nThe **multivariable chain rule** gives the answer:\n$$ \\frac{dz}{dt} = \\frac{\\partial f}{\\partial x} \\frac{dx}{dt} + \\frac{\\partial f}{\\partial y} \\frac{dy}{dt} $$\n\nThis formula has a beautiful, compact form using the gradient and the velocity vector of your path, $r'(t) = \\begin{bmatrix} dx/dt \\\\ dy/dt \\end{bmatrix}$:\n$$ \\frac{dz}{dt} = \\nabla f \\cdot r'(t) $$\nThe rate of change of your altitude is the dot product of the \"steepest uphill\" vector and your direction of travel vector. This is a perfect example of how linear algebra and calculus work together.\n\n## Tutorial 6: Applications of Chain Rule\n\n### Problem 1: Voltage Variation in a Temperature-Dependent Circuit\n\nA resistive circuit has voltage $V = I \\cdot R$, where current and resistance vary with temperature $T$:\n\n$$\nI(T) = 5\\sqrt{T}, \\quad R(T) = 2T + 3\n$$ \n\nUsing the chain rule, find $\\dfrac{dV}{dT}$ and interpret how voltage changes as temperature increases. Verify by substitution.\n\n**Chain-rule solution:**\n\n1. Intermediate variable: $V(I(T),R(T))$  \n2. Partial derivatives:\n\n$$\n\\frac{\\partial V}{\\partial I} = R, \\quad \\frac{\\partial V}{\\partial R} = I\n$$  \n\n3. Derivatives of intermediate variables:\n\n$$\n\\frac{dI}{dT} = \\frac{5}{2} T^{-1/2}, \\quad \\frac{dR}{dT} = 2\n$$  \n\n4. Apply chain rule:\n\n$$\n\\frac{dV}{dT} = \\frac{\\partial V}{\\partial I}\\frac{dI}{dT} + \\frac{\\partial V}{\\partial R}\\frac{dR}{dT} = R \\cdot \\frac{5}{2}T^{-1/2} + I \\cdot 2\n$$  \n\n5. Substitute $I(T)$ and $R(T)$:\n\n$$\n\\frac{dV}{dT} = (2T+3) \\cdot \\frac{5}{2}T^{-1/2} + 5\\sqrt{T} \\cdot 2 = 15\\sqrt{T} +\\frac{15}{2\\sqrt{T}}\n$$\n\n**Verification by substitution:**\n\n$$\nV(T) = 5\\sqrt{T}(2T+3) \\implies \\frac{dV}{dT} = 15T^{1/2} + \\frac{15}{2T^{1/2}}\n$$\n\n**Python `SymPy` code:**\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport sympy as sp\n\nT = sp.symbols('T', positive=True)\nI = 5*sp.sqrt(T)\nR = 2*T + 3\nV = I*R\n\n# Direct derivative w.r.t T\ndV_dT = sp.diff(V, T)\ndV_dT\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=tex}\n$\\displaystyle 10 \\sqrt{T} + \\frac{5 \\left(2 T + 3\\right)}{2 \\sqrt{T}}$\n```\n:::\n:::\n\n\n>*Alternate method:*\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nT = sp.symbols('T', positive=True)\nI, R = sp.symbols('I R', real=True)  # treat as independent\nV = I*R\n\n# Partial derivatives\ndV_dI = sp.diff(V, I)   # R\ndV_dR = sp.diff(V, R)   # I\n\n# Substitute expressions for I and R\nI_expr = 5*sp.sqrt(T)\nR_expr = 2*T + 3\n\n# Derivatives of I and R w.r.t T\ndI_dT = sp.diff(I_expr, T)\ndR_dT = sp.diff(R_expr, T)\n\n# Chain rule\ndV_dT = dV_dI.subs(I,I_expr).subs(R,R_expr)*dI_dT + dV_dR.subs(I,I_expr)*dR_dT\nsp.simplify(dV_dT)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=tex}\n$\\displaystyle \\frac{15 \\left(2 T + 1\\right)}{2 \\sqrt{T}}$\n```\n:::\n:::\n\n\n### Problem 2: Power Output in a Time-Varying Transistor\n\nIn a transistor circuit, the instantaneous power is given by $P = V^2 / R$, where $V$ is the voltage across the transistor and $R$ is the resistance of the load. Suppose the voltage varies with time due to a decaying input signal, and the resistance slowly changes due to heating effects:\n\n$$\nV(t) = 10 e^{-0.02 t} \\text{ volts}, \\quad R(t) = 4 + 0.1 t \\ \\Omega\n$$\n\nCompute the **rate of change of power** $\\dfrac{dP}{dt}$ at any time $t$ using the **multivariable chain rule**, and verify the result by direct differentiation.\n\n\n**Solution (Chain-Rule Method):**\n\n1. Treat $P$ as a function of two variables: $P(V,R)$.\n\n$$\nP(V,R) = \\frac{V^2}{R}\n$$\n\n2. Compute the **partial derivatives**:\n\n$$\n\\frac{\\partial P}{\\partial V} = \\frac{2V}{R}, \\quad\n\\frac{\\partial P}{\\partial R} = -\\frac{V^2}{R^2}\n$$\n\n3. Compute **derivatives of intermediate variables** w.r.t. $t$:\n\n$$\n\\frac{dV}{dt} = \\frac{d}{dt}(10 e^{-0.02 t}) = -0.2 e^{-0.02 t}, \\quad\n\\frac{dR}{dt} = \\frac{d}{dt}(4 + 0.1 t) = 0.1\n$$\n\n4. Apply the **multivariable chain rule**:\n\n$$\n\\frac{dP}{dt} = \\frac{\\partial P}{\\partial V} \\frac{dV}{dt} + \\frac{\\partial P}{\\partial R} \\frac{dR}{dt}\n$$\n\nSubstitute the values:\n\n$$\n\\frac{dP}{dt} = \\frac{2V}{R} \\cdot (-0.2 e^{-0.02 t}) + \\left(-\\frac{V^2}{R^2}\\right) \\cdot 0.1\n$$\n\n5. Substitute $V(t)$ and $R(t)$:\n\n$$\n\\frac{dP}{dt} = \\frac{2 \\cdot 10 e^{-0.02 t}}{4 + 0.1 t} \\cdot (-0.2 e^{-0.02 t}) - \\frac{(10 e^{-0.02 t})^2}{(4 + 0.1 t)^2} \\cdot 0.1\n$$\n\nSimplify:\n\n$$\n\\frac{dP}{dt} = - \\frac{4 (e^{-0.04 t})}{4 + 0.1 t} - \\frac{100 e^{-0.04 t}}{(4 + 0.1 t)^2}\n$$\n\nThis is the **rate of change of power** at any time $t$.\n\n\n**Verification by direct differentiation:**\n\nDirectly compute:\n\n$$\nP(t) = \\frac{(10 e^{-0.02 t})^2}{4 + 0.1 t} = \\frac{100 e^{-0.04 t}}{4 + 0.1 t}\n$$\n\nDifferentiating w.r.t $t$ gives exactly the same expression:\n\n$$\n\\frac{dP}{dt} = - \\frac{4 e^{-0.04 t}}{4 + 0.1 t} - \\frac{100 e^{-0.04 t}}{(4 + 0.1 t)^2}\n$$\n\n>**Python code:**\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport sympy as sp\n\nt = sp.symbols('t', real=True)\n# Define independent symbols for chain rule\nV_sym, R_sym = sp.symbols('V R', real=True)\nP = V_sym**2 / R_sym\n\n# Partial derivatives\ndP_dV = sp.diff(P, V_sym)   # 2*V/R\ndP_dR = sp.diff(P, R_sym)   # -V^2 / R^2\n\n# Expressions for V(t) and R(t)\nV_expr = 10*sp.exp(-0.02*t)\nR_expr = 4 + 0.1*t\n\n# Derivatives of intermediate variables\ndV_dt = sp.diff(V_expr, t)\ndR_dt = sp.diff(R_expr, t)\n\n# Chain rule\ndP_dt = dP_dV.subs({V_sym:V_expr, R_sym:R_expr})*dV_dt + dP_dR.subs({V_sym:V_expr, R_sym:R_expr})*dR_dt\ndP_dt_simplified = sp.simplify(dP_dt)\ndP_dt_simplified\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n$\\displaystyle \\frac{\\left(- 0.0025 t - 0.1625\\right) e^{- 0.04 t}}{6.25 \\cdot 10^{-5} t^{2} + 0.005 t + 0.1}$\n```\n:::\n:::\n\n\n### Problem 3:  Capacitance Sensitivity in a Temperature-Dependent Capacitor\n\nA parallel-plate capacitor has capacitance \n\n$$\nC = \\varepsilon \\frac{A}{d},\n$$ \n\nwhere $A$ is the plate area, $d$ is the separation, and $\\varepsilon$ is the permittivity. The capacitor is subject to temperature variations that change the radius of the circular plates and the separation:\n\n$$\nA = \\pi r^2, \\quad r = 2 + 0.01 T, \\quad d = 1 + 0.005 T\n$$\n\nCompute the *rate of change of capacitance* $\\dfrac{dC}{dT}$ using the **multivariable chain rule** and verify by direct differentiation.\n\n\n**Solution (Chain-Rule Method):**\n\n1. Treat $C$ as a function of two variables: $C(A(T), d(T))$.\n\n$$\nC(A,d) = \\frac{\\varepsilon A}{d}\n$$\n\n2. Compute the **partial derivatives**:\n\n$$\n\\frac{\\partial C}{\\partial A} = \\frac{\\varepsilon}{d}, \\quad\n\\frac{\\partial C}{\\partial d} = -\\frac{\\varepsilon A}{d^2}\n$$\n\n3. Compute **derivatives of intermediate variables** w.r.t $T$:\n\n$$\n\\frac{dA}{dT} = \\frac{d}{dT} (\\pi r^2) = 2\\pi r \\frac{dr}{dT} = 2 \\pi (2+0.01T)(0.01) = 0.02 \\pi (2+0.01T)\n$$\n\n$$\n\\frac{dd}{dT} = \\frac{d}{dT}(1 + 0.005 T) = 0.005\n$$\n\n4. Apply the **multivariable chain rule**:\n\n$$\n\\frac{dC}{dT} = \\frac{\\partial C}{\\partial A} \\frac{dA}{dT} + \\frac{\\partial C}{\\partial d} \\frac{dd}{dT}\n$$\n\nSubstitute the partial derivatives:\n\n$$\n\\frac{dC}{dT} = \\frac{\\varepsilon}{d} \\cdot 0.02 \\pi (2+0.01T) - \\frac{\\varepsilon A}{d^2} \\cdot 0.005\n$$\n\n5. Substitute $A = \\pi r^2 = \\pi (2 + 0.01 T)^2$ and $d = 1 + 0.005 T$:\n\n$$\n\\frac{dC}{dT} = \\frac{\\varepsilon \\cdot 0.02 \\pi (2+0.01T)}{1+0.005T} - \\frac{\\varepsilon \\pi (2+0.01T)^2 \\cdot 0.005}{(1+0.005T)^2}\n$$\n\nThis gives the **rate of change of capacitance** at any temperature $T$.\n\n**Verification by direct differentiation:**\n\nDirectly differentiate:\n\n$$\nC(T) = \\frac{\\varepsilon \\pi (2+0.01 T)^2}{1 + 0.005 T}\n$$\n\nw.r.t $T$ to get exactly the same expression as above.\n\n**Python SymPy Code (Corrected Chain-Rule Implementation):**\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport sympy as sp\n\nT = sp.symbols('T', real=True)\neps = sp.symbols('eps', real=True)\n\n# Define intermediate variables as symbols for chain rule\nA_sym, d_sym = sp.symbols('A d', real=True)\nC = eps * A_sym / d_sym\n\n# Partial derivatives\ndC_dA = sp.diff(C, A_sym)   # eps / d\ndC_dd = sp.diff(C, d_sym)   # -eps*A / d^2\n\n# Expressions for A(T) and d(T)\nr_expr = 2 + 0.01*T\nA_expr = sp.pi * r_expr**2\nd_expr = 1 + 0.005*T\n\n# Derivatives of intermediate variables\ndA_dT = sp.diff(A_expr, T)\ndd_dT = sp.diff(d_expr, T)\n\n# Chain rule\ndC_dT = dC_dA.subs({A_sym:A_expr, d_sym:d_expr})*dA_dT + dC_dd.subs({A_sym:A_expr, d_sym:d_expr})*dd_dT\ndC_dT_simplified = sp.simplify(dC_dT)\ndC_dT_simplified\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=tex}\n$\\displaystyle 0.02 \\pi eps$\n```\n:::\n:::\n\n\n### Problem 4: Neural Network Weight Sensitivity\n\nConsider a simple neuron in a feedforward neural network with two inputs $x_1$ and $x_2$, weights $w_1$ and $w_2$, and bias $b$. The output of the neuron is  \n\n$$\nz = \\tanh(u), \\quad u = w_1 x_1 + w_2 x_2 + b\n$$  \n\nCompute the *sensitivity of the output* with respect to the weights, i.e., $\\frac{\\partial z}{\\partial w_1}$ and $\\frac{\\partial z}{\\partial w_2}$, using the *multivariable chain rule*. Verify the results using Python's SymPy library.\n\n\n**Solution (Chain-Rule Method):**\n\n1. Treat $z$ as a function of $u$: $z = \\tanh(u)$.  \n2. Compute the derivative of $z$ with respect to $u$:\n\n$$\n\\frac{dz}{du} = 1 - \\tanh^2(u)\n$$\n\n3. Compute the derivatives of $u$ with respect to the weights:\n\n$$\n\\frac{\\partial u}{\\partial w_1} = x_1, \\quad \\frac{\\partial u}{\\partial w_2} = x_2\n$$\n\n4. Apply the **chain rule**:\n\n$$\n\\frac{\\partial z}{\\partial w_1} = \\frac{dz}{du} \\cdot \\frac{\\partial u}{\\partial w_1} = (1 - \\tanh^2(u)) \\cdot x_1\n$$\n\n$$\n\\frac{\\partial z}{\\partial w_2} = \\frac{dz}{du} \\cdot \\frac{\\partial u}{\\partial w_2} = (1 - \\tanh^2(u)) \\cdot x_2\n$$\n\n\n**Verification using Python SymPy:**\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols\nw1, w2, x1, x2, b = sp.symbols('w1 w2 x1 x2 b', real=True)\n\n# Define u and z\nu = w1*x1 + w2*x2 + b\nz = sp.tanh(u)\n\n# Compute derivatives using chain rule automatically\ndz_dw1 = sp.diff(z, w1)\ndz_dw2 = sp.diff(z, w2)\n\n# Simplify\ndz_dw1_simpl = sp.simplify(dz_dw1)\ndz_dw2_simpl = sp.simplify(dz_dw2)\n\ndz_dw1_simpl, dz_dw2_simpl\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n(-x1*tanh(b + w1*x1 + w2*x2)**2 + x1, -x2*tanh(b + w1*x1 + w2*x2)**2 + x2)\n```\n:::\n:::\n\n\n### Problem 5: Temperature in a Polar Sensor Grid\n \nA sensor grid measures temperature at points $(x, y)$, where the temperature depends on position as  \n\n$$\nT = x^2 + y^2\n$$  \n\nSuppose the sensors are arranged in a polar coordinate system:\n\n$$\nx = r \\cos\\theta, \\quad y = r \\sin\\theta\n$$  \n\nCompute the *rate of change of temperature* with respect to the radial distance $r$ and the angular position $\\theta$, i.e., $\\frac{\\partial T}{\\partial r}$ and $\\frac{\\partial T}{\\partial \\theta}$, using the *multivariable chain rule*. Verify the results using Python `SymPy`.\n\n\n**Solution (Chain-Rule Method):**\n\n1. Treat $T$ as a function of $x$ and $y$:\n\n$$\nT(x,y) = x^2 + y^2\n$$\n\nPartial derivatives:\n\n$$\n\\frac{\\partial T}{\\partial x} = 2x, \\quad \\frac{\\partial T}{\\partial y} = 2y\n$$\n\n2. Compute derivatives of $x$ and $y$ with respect to $r$ and $\\theta$:\n\n$$\n\\frac{\\partial x}{\\partial r} = \\cos\\theta, \\quad \\frac{\\partial x}{\\partial \\theta} = -r \\sin\\theta\n$$\n\n$$\n\\frac{\\partial y}{\\partial r} = \\sin\\theta, \\quad \\frac{\\partial y}{\\partial \\theta} = r \\cos\\theta\n$$\n\n3. Apply the **multivariable chain rule**:\n\n$$\n\\frac{\\partial T}{\\partial r} = \\frac{\\partial T}{\\partial x} \\frac{\\partial x}{\\partial r} + \\frac{\\partial T}{\\partial y} \\frac{\\partial y}{\\partial r} = 2x \\cos\\theta + 2y \\sin\\theta\n$$\n\n$$\n\\frac{\\partial T}{\\partial \\theta} = \\frac{\\partial T}{\\partial x} \\frac{\\partial x}{\\partial \\theta} + \\frac{\\partial T}{\\partial y} \\frac{\\partial y}{\\partial \\theta} = 2x(-r \\sin\\theta) + 2y(r \\cos\\theta) = 0\n$$\n\n4. Substitute $x = r \\cos\\theta$, $y = r \\sin\\theta$:\n\n$$\n\\frac{\\partial T}{\\partial r} = 2r (\\cos^2\\theta + \\sin^2\\theta) = 2r\n$$\n\n$$\n\\frac{\\partial T}{\\partial \\theta} = 0\n$$\n\n\n**Verification using Python SymPy:**\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols\nr, theta = sp.symbols('r theta', real=True)\n\n# Define coordinate transformations\nx = r * sp.cos(theta)\ny = r * sp.sin(theta)\n\n# Temperature function\nT = x**2 + y**2\n\n# Partial derivatives w.r.t r and theta\ndT_dr = sp.diff(T, r)\ndT_dtheta = sp.diff(T, theta)\n\ndT_dr_simpl = sp.simplify(dT_dr)\ndT_dtheta_simpl = sp.simplify(dT_dtheta)\n\ndT_dr_simpl, dT_dtheta_simpl\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(2*r, 0)\n```\n:::\n:::\n\n\n### Problem 6: Dynamic System Response Over Time\n\nA dynamic system has an output that depends multiplicatively on two time-varying inputs. The instantaneous output is\n\n$$\nz = e^{\\,x y},\n$$\n\nwhere the inputs themselves vary with time as\n\n$$\nx(t) = 2t^2,\\qquad y(t) = 3t + 1.\n$$\n\nUse the *multivariable chain rule* to compute the total derivative $\\dfrac{dz}{dt}$ (i.e. the rate of change of the output with respect to time). Then *verify* the result by substituting $x(t),y(t)$ into $z$ and differentiating directly. Evaluate the rate at $t=1$ and interpret the result.\n\n**Solution (Chain-Rule Method):**\n\n1. Identify intermediate variables: $z = f(x,y)$ with $f(x,y)=e^{xy}$, and $x=x(t),\\ y=y(t)$.\n\n2. Compute the partial derivatives of $z$ w.r.t the intermediate variables:\n\n$$\n\\frac{\\partial z}{\\partial x} = \\frac{\\partial}{\\partial x} e^{xy} = y\\,e^{xy}, \\qquad\n\\frac{\\partial z}{\\partial y} = \\frac{\\partial}{\\partial y} e^{xy} = x\\,e^{xy}.\n$$\n\n3. Compute time-derivatives of the intermediate variables:\n\n$$\n\\frac{dx}{dt} = \\frac{d}{dt}(2t^2) = 4t, \\qquad\n\\frac{dy}{dt} = \\frac{d}{dt}(3t+1) = 3.\n$$\n\n4. Apply the multivariable chain rule (total derivative):\n\n$$\n\\frac{dz}{dt} = \\frac{\\partial z}{\\partial x}\\frac{dx}{dt} + \\frac{\\partial z}{\\partial y}\\frac{dy}{dt}.\n$$\n\nSubstitute the partials and time-derivatives:\n\n$$\n\\frac{dz}{dt} = \\bigl(y e^{xy}\\bigr)(4t) + \\bigl(x e^{xy}\\bigr)(3)\n= e^{xy}\\bigl(4t y + 3x\\bigr).\n$$\n\n5. Evaluate at $t=1$. First compute $x(1)=2\\cdot1^2 = 2$ and $y(1)=3\\cdot1+1 = 4$. Thus\n\n$$\n\\frac{dz}{dt}\\Big|_{t=1} = e^{(2)(4)}\\bigl(4\\cdot1\\cdot4 + 3\\cdot2\\bigr) = e^{8}(16 + 6) = 22 e^{8}.\n$$\n\n**Interpretation:** At $t=1$ the output is increasing very rapidly: the instantaneous rate is $22e^8$, reflecting strong sensitivity because $z$ is exponential in the product $xy$.\n\n**Verification by substitution (direct differentiation):**\n\nSubstitute $x(t)$ and $y(t)$ into $z$:\n\n$$\nz(t) = e^{(2t^2)(3t+1)} = e^{6t^3 + 2t^2}.\n$$\n\nDifferentiate directly:\n\n$$\n\\frac{dz}{dt} = e^{6t^3 + 2t^2}\\cdot(18t^2 + 4t).\n$$\n\nCheck algebraically that\n\n$$\n18t^2 + 4t \\equiv 4t(3t+1) + 3(2t^2) = 4t y + 3x,\n$$\n\nso the direct differentiation result matches the chain-rule result. Evaluating at $t=1$ gives $22e^8$ as before.\n\n**Python (SymPy) verification code:**\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nimport sympy as sp\n\n# symbol\nt = sp.symbols('t', real=True)\n\n# define x(t), y(t)\nx_expr = 2*t**2\ny_expr = 3*t + 1\n\n# Method A: explicit chain-rule via partials (use x,y as symbols then substitute)\nx_sym, y_sym = sp.symbols('x_sym y_sym')\nz_sym = sp.exp(x_sym*y_sym)\n\n# partials\nz_x = sp.diff(z_sym, x_sym)   # y * exp(xy)\nz_y = sp.diff(z_sym, y_sym)   # x * exp(xy)\n\n# substitute x(t), y(t) and multiply by dx/dt, dy/dt\ndzdt_chain = (z_x.subs({x_sym: x_expr, y_sym: y_expr}) * sp.diff(x_expr, t) +\n              z_y.subs({x_sym: x_expr, y_sym: y_expr}) * sp.diff(y_expr, t))\ndzdt_chain_simpl = sp.simplify(dzdt_chain)\n\n# evaluate at t=1\ndzdt_chain_at_1 = dzdt_chain_simpl.subs(t, 1)\n\n# Method B: substitute then differentiate\nz_sub = sp.exp(x_expr * y_expr)\ndzdt_sub = sp.diff(z_sub, t)\ndzdt_sub_simpl = sp.simplify(dzdt_sub)\ndzdt_sub_at_1 = dzdt_sub_simpl.subs(t, 1)\n\ndzdt_chain_simpl, dzdt_chain_at_1, dzdt_sub_simpl, dzdt_sub_at_1\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(2*t*(9*t + 2)*exp(2*t**2*(3*t + 1)),\n 22*exp(8),\n 2*t*(9*t + 2)*exp(2*t**2*(3*t + 1)),\n 22*exp(8))\n```\n:::\n:::\n\n\n## The Main Event: Finding Maxima and Minima\n\nNow we can answer the big question: how do we find the peaks and valleys of our landscape?\n\nAt the very top of a peak or the bottom of a valley, the ground is perfectly flat. The slope in *every* direction is zero. This means both partial derivatives must be zero.\n\n> **Critical Points**\n> A point $(a, b)$ is a **critical point** of $f(x,y)$ if the gradient at that point is the zero vector:\n> $$ \\nabla f(a, b) = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} \\quad \\text{which means} \\quad f_x(a, b) = 0 \\text{ and } f_y(a, b) = 0 $$\n\nBut a flat spot isn't always a peak or a valley. It could also be a **saddle point**, like the middle of a Pringles chip—it's a minimum in one direction and a maximum in another.\n\nTo classify these critical points, we need a multivariable version of the Second Derivative Test. This test involves a quantity called the **Discriminant** ($D$), which is built from the second-order partial derivatives.\n\n::: {.callout-note}\n### The Second Derivative Test\n\nFirst, find all critical points by solving $\\nabla f = 0$. Then, for each critical point $(a, b)$, calculate the second partial derivatives ($f_{xx}, f_{yy}, f_{xy}$) at that point.\n\nDefine the Discriminant $D = f_{xx}(a,b) f_{yy}(a,b) - [f_{xy}(a,b)]^2$.\n\n1.  If $D > 0$ and $f_{xx}(a,b) > 0$, then $f$ has a **local minimum** at $(a, b)$.\n2.  If $D > 0$ and $f_{xx}(a,b) < 0$, then $f$ has a **local maximum** at $(a, b)$.\n3.  If $D < 0$, then $f$ has a **saddle point** at $(a, b)$.\n4.  If $D = 0$, the test is inconclusive.\n:::\n\nNote that the Discriminant is just the determinant of the **Hessian matrix**, a beautiful connection back to linear algebra!\n$$ H = \\begin{bmatrix} f_{xx} & f_{xy} \\\\ f_{yx} & f_{yy} \\end{bmatrix} \\implies D = \\det(H) $$\n\n### Example: Finding the Extrema of Our Landscape\n\nLet's use `SymPy` to find and classify all the critical points of the function $f(x, y) = (x^2 + 3y^2) e^{1 - x^2 - y^2}$ we plotted at the beginning.\n\n::: {#find-classify-extrema .cell execution_count=12}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols and the function\nx, y = sp.symbols('x y')\nf = (x**2 + 3*y**2) * sp.exp(1 - x**2 - y**2)\n\n# 1. Find the partial derivatives\nfx = sp.diff(f, x)\nfy = sp.diff(f, y)\n\n# 2. Find the critical points by solving ∇f = 0\n# This can be computationally intensive; we'll use a numerical approach for clarity\n# For this specific function, inspection shows critical points at:\n# (0,0), (1,0), (-1,0), (0,1), (0,-1)\ncritical_points = [\n    (0, 0),\n    (1, 0),\n    (-1, 0),\n    (0, 1),\n    (0, -1)\n]\nprint(f\"The critical points are: {critical_points}\\n\")\n\n\n# 3. Calculate second-order partial derivatives\nfxx = sp.diff(fx, x)\nfyy = sp.diff(fy, y)\nfxy = sp.diff(fx, y)\n\n# 4. Create the Discriminant D\nD = fxx * fyy - fxy**2\n\n# 5. Classify each critical point\nfor p in critical_points:\n    px, py = p\n    # Substitute the point's coordinates into D and fxx\n    D_val = D.subs([(x, px), (y, py)])\n    fxx_val = fxx.subs([(x, px), (y, py)])\n    \n    print(f\"--- Analyzing point {p} ---\")\n    print(f\"  D = {D_val:.2f}, f_xx = {fxx_val:.2f}\")\n\n    if D_val > 0 and fxx_val > 0:\n        print(\"  Result: Local Minimum\")\n    elif D_val > 0 and fxx_val < 0:\n        print(\"  Result: Local Maximum\")\n    elif D_val < 0:\n        print(\"  Result: Saddle Point\")\n    else:\n        print(\"  Result: Test is inconclusive\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe critical points are: [(0, 0), (1, 0), (-1, 0), (0, 1), (0, -1)]\n\n--- Analyzing point (0, 0) ---\n  D = 88.67, f_xx = 5.44\n  Result: Local Minimum\n--- Analyzing point (1, 0) ---\n  D = -16.00, f_xx = -4.00\n  Result: Saddle Point\n--- Analyzing point (-1, 0) ---\n  D = -16.00, f_xx = -4.00\n  Result: Saddle Point\n--- Analyzing point (0, 1) ---\n  D = 48.00, f_xx = -4.00\n  Result: Local Maximum\n--- Analyzing point (0, -1) ---\n  D = 48.00, f_xx = -4.00\n  Result: Local Maximum\n```\n:::\n:::\n\n\nThe results match what we see in the 3D plot perfectly! The origin is a local minimum, the points on the y-axis are local maxima (the two highest peaks), and the points on the x-axis are saddle points.\n\n## Tutorial 7: Local Extrema and the Second Partial Derivative Test  \n\n### Problem 1- Power in a resistor (filter design)\n\nThe instantaneous power dissipated across a resistor is modeled by\n$$\nP(V,R)=\\frac{V^{2}}{R+10},\n$$\nwhere $V$ is the input voltage (volts) and $R$ is the resistance (ohms). Find all stationary points and classify them using the second partial derivative test. Give a physical interpretation.\n\n>**Solution:**\n\n**1. First partial derivatives**\n$$\nP_V=\\frac{\\partial P}{\\partial V}=\\frac{2V}{R+10},\\qquad\nP_R=\\frac{\\partial P}{\\partial R}=-\\frac{V^{2}}{(R+10)^{2}}.\n$$\n\nStationary points require $P_V=0$ and $P_R=0$ simultaneously.\n\n- From $P_V=0$ we get $V=0$.\n\n- Substitute $V=0$ into $P_R$: $P_R(0,R)=0$ (for all $R$).\n\n**Conclusion:** The set of stationary points is the entire line $V=0$ (all $R$).\n\n\n**Second partial derivatives**\n$$\nP_{VV}=\\frac{2}{R+10},\\qquad\nP_{RR}=\\frac{2V^{2}}{(R+10)^{3}},\\qquad\nP_{VR}=P_{RV}=-\\frac{2V}{(R+10)^{2}}.\n$$\n\nEvaluate at any stationary point $(V=0,R)$:\n$$\nP_{VV}\\big|_{V=0}=\\frac{2}{R+10}>0,\\quad\nP_{RR}\\big|_{V=0}=0,\\quad\nP_{VR}\\big|_{V=0}=0.\n$$\n\nHessian determinant (Discriminant):\n$$\nD = P_{VV}P_{RR}-P_{VR}^2 = \\frac{2}{R+10}\\cdot 0 - 0 = 0,\n$$\nso the second derivative test is **inconclusive** (because $D=0$).\n\n\n**Further reasoning / interpretation**\n\nCompute $P$ along $V=0$: $P(0,R)=0$. Since $P(V,R)\\ge0$ for all $(V,R)$ (denominator is positive for physical $R$), $P=0$ is the **global minimum value**. The line $V=0$ is therefore a flat valley of minima: in the $V$-direction the function is convex ($P_{VV}>0$), while along $R$ it is flat at $V=0$.\n\n\n**SymPy verification**\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport sympy as sp\nV, R = sp.symbols('V R', real=True)\nP = V**2/(R+10)\n# first partials\ndPV = sp.diff(P, V)\ndPR = sp.diff(P, R)\n# stationary set\ncrit = sp.solve([sp.Eq(dPV,0), sp.Eq(dPR,0)], [V,R], dict=True)  # will show V=0 with free R\n# second partials\nPVV = sp.diff(P, V, 2)\nPRR = sp.diff(P, R, 2)\nPVR = sp.diff(P, V, 1, R, 1)\ndPV, dPR, crit, PVV, PRR, PVR\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n(2*V/(R + 10),\n -V**2/(R + 10)**2,\n [{V: 0}],\n 2/(R + 10),\n 2*V**2/(R + 10)**3,\n -2*V/(R + 10)**2)\n```\n:::\n:::\n\n\n### Problem 2 — Carrier mobility in a thin film\n\n*Carrier mobility in a semiconductor thin film is modeled as\n$$\n\\mu(x,y)=5 - x^{2} - 2y^{2} + xy,\n$$\nwhere $x$ and $y$ are nondimensional process parameters (e.g., doping concentration factor and annealing index). Find the stationary points and classify them using the second partial derivative test. Discuss the engineering interpretation for the point with highest mobility.\n\n>**Solution**\n\n**First partial derivatives**\n\nCompute the partial derivatives:\n$$\n\\mu_x = \\frac{\\partial \\mu}{\\partial x} = -2x + y, \\qquad\n\\mu_y = \\frac{\\partial \\mu}{\\partial y} = -4y + x.\n$$\n\nSet $\\mu_x=0$ and $\\mu_y=0$ to find stationary points:\n$$\n-2x + y = 0 \\Rightarrow y = 2x, \\\\\n-4y + x = 0 \\Rightarrow x = 4y.\n$$\n\nSubstitute $y = 2x$ into $x = 4y$:\n\n$$\nx = 4(2x) = 8x \\Rightarrow 7x=0 \\Rightarrow x=0 \\Rightarrow y = 0.\n$$\n\n**Stationary point:** $(x,y) = (0,0)$.\n\n**Second partial derivatives**\n\nCompute the second partial derivatives:\n$$\n\\mu_{xx} = -2, \\quad \\mu_{yy} = -4, \\quad \\mu_{xy} = 1.\n$$\n\nHessian determinant:\n$$\nD = \\mu_{xx}\\mu_{yy} - (\\mu_{xy})^2 = (-2)(-4) - 1^2 = 8 - 1 = 7 > 0.\n$$\n\nSince $D>0$ and $\\mu_{xx}=-2<0$, the stationary point $(0,0)$ is a **local maximum**.\n\n**Value at maximum:** $\\mu(0,0) = 5$.\n\n\n**Interpretation**\n\nThe model predicts that the **highest carrier mobility** occurs at the nominal process parameters $(x,y)=(0,0)$. Any deviation from these parameters reduces mobility.\n\n\n**SymPy verification**\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols\nx, y = sp.symbols('x y', real=True)\n\n# Define function\nmu = 5 - x**2 - 2*y**2 + x*y\n\n# Compute first partial derivatives\ndmu_dx = sp.diff(mu, x)\ndmu_dy = sp.diff(mu, y)\n\n# Solve for stationary points\ncrit = sp.solve([sp.Eq(dmu_dx,0), sp.Eq(dmu_dy,0)], [x,y])\n\n# Compute Hessian\nH = sp.hessian(mu, (x,y))\n\n# Evaluate determinant at stationary point\nD = sp.det(H).subs({x:0, y:0})\n\ndmu_dx, dmu_dy, crit, H, D\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n(-2*x + y,\n x - 4*y,\n {x: 0, y: 0},\n Matrix([\n [-2,  1],\n [ 1, -4]]),\n 7)\n```\n:::\n:::\n\n\n### Problem 3 — Cooling fin efficiency\n\nThe thermal efficiency of a cooling fin is modeled by\n$$\n\\eta(x,y) = 80 - 4x^{2} - 2y^{2} + 3xy,\n$$\nwhere $x$ and $y$ are nondimensional geometric parameters (e.g., normalized fin spacing and thickness). Determine the stationary point that optimizes efficiency and classify it using the second partial derivative test. Interpret the result in terms of fin design.\n\n>**Solution**\n\n**First partial derivatives**\n\nCompute the first partial derivatives:\n$$\n\\eta_x = \\frac{\\partial \\eta}{\\partial x} = -8x + 3y, \\qquad\n\\eta_y = \\frac{\\partial \\eta}{\\partial y} = -4y + 3x.\n$$\n\nSet $\\eta_x=0$ and $\\eta_y=0$ to find stationary points:\n\n$$\n-8x + 3y = 0 \\Rightarrow y = \\frac{8}{3}x, \\\\\n-4y + 3x = 0 \\Rightarrow x = \\frac{4}{3}y.\n$$\n\nSubstitute $y=\\frac{8}{3}x$ into $x = \\frac{4}{3}y$:\n\n$$\nx = \\frac{4}{3}\\cdot \\frac{8}{3}x = \\frac{32}{9}x \\Rightarrow \\frac{32}{9}x - x = 0 \\Rightarrow \\frac{23}{9}x = 0 \\Rightarrow x=0.\n$$\n\nHence $y = \\frac{8}{3}\\cdot 0 = 0$.\n\n**Stationary point:** $(x,y) = (0,0)$.\n\n**Second partial derivatives**\n\nCompute second partial derivatives:\n$$\n\\eta_{xx} = -8, \\quad \\eta_{yy} = -4, \\quad \\eta_{xy} = 3.\n$$\n\nHessian determinant:\n$$\nD = \\eta_{xx}\\eta_{yy} - (\\eta_{xy})^2 = (-8)(-4) - 3^2 = 32 - 9 = 23 > 0.\n$$\n\nSince $D>0$ and $\\eta_{xx}=-8<0$, the stationary point $(0,0)$ is a **local maximum**.\n\n**Value at maximum:** $\\eta(0,0) = 80$.\n\n\n**Interpretation**\n\nThe model predicts that the **maximum thermal efficiency** occurs at the nominal fin geometry $(x,y)=(0,0)$. Deviations in spacing or thickness reduce efficiency. Engineers can use this information to guide optimal fin design.\n\n**SymPy verification**\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols\nx, y = sp.symbols('x y', real=True)\n\n# Define function\neta = 80 - 4*x**2 - 2*y**2 + 3*x*y\n\n# First partial derivatives\ndeta_dx = sp.diff(eta, x)\ndeta_dy = sp.diff(eta, y)\n\n# Solve for stationary points\ncrit = sp.solve([sp.Eq(deta_dx,0), sp.Eq(deta_dy,0)], [x,y])\n\n# Hessian matrix\nH = sp.hessian(eta, (x,y))\n\n# Evaluate determinant at stationary point\nD = sp.det(H).subs({x:0, y:0})\n\ndeta_dx, deta_dy, crit, H, D\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n(-8*x + 3*y,\n 3*x - 4*y,\n {x: 0, y: 0},\n Matrix([\n [-8,  3],\n [ 3, -4]]),\n 23)\n```\n:::\n:::\n\n\n### Problem 4 — Execution time in resource allocation\n\nThe estimated execution time of a program is modeled by\n$$\nT(x,y) = x^{3} + y^{3} - 6xy + 20,\n$$\nwhere $x$ represents CPU allocation and $y$ represents memory bandwidth (both nondimensional). Find all stationary points, classify them using the second partial derivative test, and identify the point corresponding to minimal execution time.\n\n>**Solution:**\n\n**First partial derivatives**\n\nCompute the first partial derivatives:\n$$\nT_x = \\frac{\\partial T}{\\partial x} = 3x^{2} - 6y, \\qquad\nT_y = \\frac{\\partial T}{\\partial y} = 3y^{2} - 6x.\n$$\n\nSet $T_x=0$ and $T_y=0$ to find stationary points:\n\n$$\n3x^2 - 6y = 0 \\Rightarrow y = \\frac{1}{2} x^2, \\\\\n3y^2 - 6x = 0 \\Rightarrow x = \\frac{1}{2} y^2.\n$$\n\nSubstitute $y=\\frac{1}{2}x^2$ into $x=\\frac{1}{2}y^2$:\n\n$$\nx = \\frac{1}{2}\\left(\\frac{1}{2}x^2\\right)^2 = \\frac{1}{8} x^4.\n$$\n\nSolve:\n- $x=0 \\Rightarrow y = \\frac{1}{2} \\cdot 0^2 = 0$, giving stationary point $(0,0)$.\n- If $x\\ne 0$: divide both sides by $x$, $1 = \\frac{1}{8} x^3 \\Rightarrow x^3 = 8 \\Rightarrow x=2$, then $y = \\frac{1}{2} (2)^2 = 2$ giving $(2,2)$.\n\n**Stationary points:** $(0,0)$ and $(2,2)$.\n\n**Second partial derivatives**\n\nCompute the second partial derivatives:\n$$\nT_{xx} = 6x, \\quad T_{yy} = 6y, \\quad T_{xy} = -6.\n$$\n\nHessian determinant:\n$$\nD = T_{xx}T_{yy} - (T_{xy})^2.\n$$\n\n- At $(0,0)$: $T_{xx}=0$, $T_{yy}=0$, $T_{xy}=-6$  \n  $D = 0\\cdot0 - (-6)^2 = -36 < 0$ → **saddle point**.\n\n- At $(2,2)$: $T_{xx}=12$, $T_{yy}=12$, $T_{xy}=-6$  \n  $D = 12\\cdot12 - (-6)^2 = 144 - 36 = 108 > 0$ and $T_{xx}=12>0$ → **local minimum**.\n\nValue at $(2,2)$:\n$$\nT(2,2) = 2^3 + 2^3 - 6\\cdot2\\cdot2 + 20 = 8 + 8 - 24 + 20 = 12.\n$$\n\n\n**Interpretation**\n\n- $(0,0)$ is a **saddle point**: small changes in $x$ or $y$ can increase or decrease execution time.\n- $(2,2)$ is a **local minimum**: allocating CPU and memory according to $(2,2)$ minimizes execution time (locally), giving $T=12$.\n\nEngineers can use this analysis for **resource optimization** to achieve minimal runtime.\n\n**SymPy verification**\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define symbols\nx, y = sp.symbols('x y', real=True)\n\n# Define function\nTfun = x**3 + y**3 - 6*x*y + 20\n\n# First partial derivatives\ndTx = sp.diff(Tfun, x)\ndTy = sp.diff(Tfun, y)\n\n# Solve for stationary points\ncrit = sp.solve([sp.Eq(dTx,0), sp.Eq(dTy,0)], [x,y])\n\n# Hessian matrix\nH = sp.hessian(Tfun, (x,y))\n\n# Evaluate determinant and classify each stationary point\nresults = [(pt, sp.simplify(sp.det(H).subs({x:pt[0], y:pt[1]})), sp.simplify(H[0,0].subs({x:pt[0], y:pt[1]}))) for pt in crit]\n\ncrit, H, results\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n([(0, 0), (2, 2)],\n Matrix([\n [6*x,  -6],\n [ -6, 6*y]]),\n [((0, 0), -36, 0), ((2, 2), 108, 12)])\n```\n:::\n:::\n\n\n## Module III Summary\n\n*   We've moved from 2D curves to 3D surfaces, or \"landscapes.\"\n*   **Partial derivatives** ($f_x, f_y$) are the slopes in the cardinal directions.\n*   The **gradient vector** ($\\nabla f = [f_x, f_y]$) packages these slopes and points in the direction of steepest ascent. It is the key to understanding the local geometry of a surface.\n*   To find potential maxima and minima (**critical points**), we find where the landscape is flat by solving $\\nabla f = 0$.\n*   The **Second Derivative Test**, using the determinant of the Hessian matrix, allows us to classify these critical points as local maxima, local minima, or saddle points.\n*   This process of finding extrema is called **optimization**, and it is the absolute core of how modern AI models are trained.\n\n",
    "supporting": [
      "module3_files\\figure-pdf"
    ],
    "filters": []
  }
}